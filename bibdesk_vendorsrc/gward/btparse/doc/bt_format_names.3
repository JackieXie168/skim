.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH bt_format_names 3 "btparse, version 0.33" "22 Decemer, 2000" "btparse"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
bt_format_names \- formatting BibTeX names for consistent output
.SH "SYNOPSIS"
.PP
.Vb 15
\&   bt_name_format * bt_create_name_format (char * parts,
\&                                           boolean abbrev_first);
\&   void bt_free_name_format (bt_name_format * format);
\&   void bt_set_format_text (bt_name_format * format, 
\&                            bt_namepart part,
\&                            char * pre_part,
\&                            char * post_part,
\&                            char * pre_token,
\&                            char * post_token);
\&   void bt_set_format_options (bt_name_format * format, 
\&                               bt_namepart part,
\&                               boolean abbrev,
\&                               bt_joinmethod join_tokens,
\&                               bt_joinmethod join_part);
\&   char * bt_format_name (bt_name * name, bt_name_format * format);
.Ve
.SH "DESCRIPTION"
After splitting a name into its components parts (represented as a
\f(CWbt_name\fR structure), you often want to put it back together again as a
single string in a consistent way.  \fBbtparse\fR provides a very flexible
way to do this, generally in two stages: first, you create a \*(L"name
format\*(R" which describes how to put the tokens and parts of any name back
together, and then you apply the format to a particular name.
.PP
The \*(L"name format\*(R" is encapsulated in a \f(CWbt_name_format\fR structure,
which is created with \f(CWbt_create_name_format()\fR.  This function
includes some clever trickery that means you can usually get away with
calling it alone, and not need to do any customization of the format.
If you do need to customize the format, though, \f(CWbt_set_format_text()\fR
and \f(CWbt_set_format_options()\fR provide that capability.
.PP
The format controls the following:
.Ip "\(bu " 4
which name parts are printed, and in what order (e.g. \*(L"first von last
jr\*(R", or \*(L"von last jr first")
.Ip "\(bu " 4
the text that precedes and follows each part (e.g. if the first name
follows the last name, you probably want a comma before the `first\*(R'
part: \*(L"Smith, John\*(R" rather than \*(L"Smith John")
.Ip "\(bu " 4
the text that precedes and follows each token (e.g. if the first name is
abbreviated, you may want a period after each token: \*(L"J. R. Smith\*(R"
rather than \*(L"J R Smith")
.Ip "\(bu" 4
the method used to join the tokens of each part together
.Ip "\(bu " 4
the method used to join each part to the following part
.PP
All of these except the list of parts to format are kept in arrays
indexed by name part: for example, the structure has a field 
.PP
.Vb 1
\&   char * post_token[BT_MAX_NAMEPARTS]
.Ve
and \f(CWpost_token[BTN_FIRST]\fR (\f(CWBTN_FIRST\fR is from the \f(CWbt_namepart\fR
\f(CWenum\fR) is the string to be added after each token in the first
name---for example, \f(CW"."\fR if the first name is to be abbreviated in the
conventional way.
.PP
Yet another \f(CWenum\fR, \f(CWbt_joinmethod\fR, describes the available methods
for joining tokens together.  Note that there are \fItwo\fR sets of join
methods in a name format: between tokens within a single part, and
between the tokens of two different parts.  The first allows you, for
example, to change \f(CW"J R Smith"\fR (first name abbreviated with no
post-token text but tokens joined by a space) to \f(CW"JR Smith"\fR (the
same, but first-name tokens jammed together).  The second is mainly used
to ensure that \*(L"von\*(R" and \*(L"last\*(R" name-parts may be joined with a tie:
\f(CW"de~Roche"\fR rather than \f(CW"de Roche"\fR.
.PP
The token join methods are:
.Ip "\s-1BTJ_MAYTIE\s0" 4
Insert a \*(L"discretionary tie\*(R" between tokens.  That is, either a space or
a \*(L"tie\*(R" is inserted, depending on context.  (A \*(L"tie,\*(R" otherwise known as
unbreakable space, is currently hard-coded as \f(CW"~"\fR---from TeX.)
.Sp
The format is then applied to a particular name by \f(CWbt_format_name()\fR,
which returns a new string.
.Ip "\s-1BTJ_SPACE\s0" 4
Always insert a space between tokens.
.Ip "\s-1BTJ_FORCETIE\s0" 4
Always insert a \*(L"tie\*(R" (\f(CW"~"\fR) between tokens.
.Ip "\s-1BTJ_NOTHING\s0" 4
Insert nothing between tokens---just jam them together.
.PP
Tokens are joined together, and thus the choice of whether to insert a
\*(L"discretionary tie\*(R" is made, at two places: within a part and between
two parts.  Naturally, this only applies when \f(CWBTJ_MAYTIE\fR was supplied
as the token-join method; \f(CWBTJ_SPACE\fR and \f(CWBTJ_FORCETIE\fR always insert
either a space or tie, and \f(CWBTJ_NOTHING\fR always adds nothing between
tokens.  Within a part, ties are added after a the first token if it is
less than three characters long, and before the last token.  Between
parts, a tie is added only if the preceding part consisted of single
token that was less than three characters long.  In all other cases,
spaces are inserted.  (This implementation slavishly follows BibTeX.)
.SH "FUNCTIONS"
.Ip "bt_create_name_format()" 4
.Sp
.Vb 2
\&   bt_name_format * bt_create_name_format (char * parts,
\&                                           boolean abbrev_first)
.Ve
Creates a name format for a given set of parts, with variations for the
most common forms of customization---the order of parts and whether to
abbreviate the first name.
.Sp
The \f(CWparts\fR parameter specifies which parts to include in a formatted
name, as well as the order in which to format them.  \f(CWparts\fR must be a
string of four or fewer characters, each of which denotes one of the
four name parts: for instance, \f(CW"vljf"\fR means to format all four parts
in \*(L"von last jr first\*(R" order.  No characters outside of the set
\f(CW"fvlj"\fR are allowed, and no characters may be repeated.
\f(CWabbrev_first\fR controls whether the `first\*(R' part will be abbreviated
(i.e., only the first letter from each token will be printed).
.Sp
In addition to simply setting the list of parts to format and the
\*(L"abbreviate\*(R" flag for the first name, \f(CWbt_create_name_format()\fR
initializes the entire format structure so as to minimize the need for
further customizations:
.Ip "\(bu " 8
The \*(L"token join method\*(R"\*(---what to insert between tokens of the same
part---is set to \f(CWBTJ_MAYTIE\fR (discretionary tie) for all parts
.Ip "\(bu" 8
The \*(L"part join method\*(R"\*(---what to insert after the final token of a
particular part, assuming there are more parts to come---is set to
\f(CWBTJ_SPACE\fR for the `first\*(R', `last\*(R', and `jr\*(R' parts.  If the `von\*(R' part
is present and immediately precedes the `last\*(R' part (which will almost
always be the case), \f(CWBTJ_MAYTIE\fR is used to join `von\*(R' to `last\*(R';
otherwise, `von\*(R' also gets \f(CWBTJ_SPACE\fR for the inter-part join method.
.Ip "\(bu" 8
The abbreviation flag is set to \f(CWFALSE\fR for the `von\*(R', `last\*(R', and `jr\*(R'
parts; for `first\*(R', the abbreviation flag is set to whatever you pass in
as \f(CWabbrev_first\fR.
.Ip "\(bu" 8
Initially, all \*(L"surrounding text\*(R" (pre-part, post-part, pre-token, and
post-token) for all parts is set to the empty string.  Then a few tweaks
are done, depending on the \f(CWabbrev_first\fR flag and the order of
tokens.  First, if \f(CWabbrev_first\fR is \f(CWTRUE\fR, the post-token text for
first name is set to \f(CW"."\fR---this changes \f(CW"J R Smith"\fR to
\f(CW"J. R. Smith"\fR, which is usually the desired form.  (If you \fIdon't\fR
want the periods, you'll have to set the post-token text yourself with
\f(CWbt_set_format_text()\fR.)
.Sp
Then, if `jr\*(R' is present and immediately after `last\*(R' (almost always the
case), the pre-part text for `jr\*(R' is set to \f(CW", "\fR, and the inter-part
join method for `last\*(R' is set to \f(CWBTJ_NOTHING\fR.  This changes 
\f(CW"John Smith Jr"\fR (where the space following \f(CW"Smith"\fR comes from
formatting the last name with a \f(CWBTJ_SPACE\fR inter-part join method) to
\f(CW"John Smith, Jr"\fR (where the \f(CW", "\fR is now associated with 
\f(CW"Jr"\fR---that way, if there is no `jr\*(R' part, the \f(CW", "\fR will
not be printed.)
.Sp
Finally, if `first\*(R' is present and immediately follows either `jr\*(R' or
`last\*(R' (which will usually be the case in \*(L"last-name first\*(R" formats),
the same sort of trickery is applied: the pre-part text for `first\*(R' is
set to \f(CW", "\fR, and the part join method for the preceding part (either
`jr\*(R' or `last') is set to \f(CWBTJ_NOTHING\fR.
.Sp
While all these rules are rather complicated, they mean that you are
usually freed from having to do any customization of the name format.
Certainly this is the case if you only need \f(CW"fvlj"\fR and \f(CW"vljf"\fR part
orders, only want to abbreviate the first name, want periods after
abbreviated tokens, non-breaking spaces in the \*(L"right\*(R" places, and
commas in the conventional places.
.Sp
If you want something out of the ordinary---for instance, abbreviated
tokens jammed together with no puncuation, or abbreviated last
names---you'll need to customize the name format a bit with
\f(CWbt_set_format_text()\fR and \f(CWbt_set_format_options()\fR.
.Ip "bt_free_name_format()" 4
.Sp
.Vb 1
\&   void bt_free_name_format (bt_name_format * format)
.Ve
Frees a name format created by \f(CWbt_create_name_format()\fR.
.Ip "bt_set_format_text()" 4
.Sp
.Vb 6
\&   void bt_set_format_text (bt_name_format * format, 
\&                            bt_namepart part,
\&                            char * pre_part,
\&                            char * post_part,
\&                            char * pre_token,
\&                            char * post_token)
.Ve
Allows you to customize some or all of the surrounding text for a single
name part.  Supply \f(CWNULL\fR for any chunk of text that you don't want to
change.
.Sp
For instance, say you want a name format that will abbreviate first
names, but without any punctuation after the abbreviated
tokens.  You could create and customize the format as follows:
.Sp
.Vb 5
\&   format = bt_create_name_format ("fvlj", TRUE);
\&   bt_set_format_text (format, 
\&                       BTN_FIRST,       /* name-part to customize */
\&                       NULL, NULL,      /* pre- and post- part text */
\&                       NULL, "");       /* empty string for post-token */
.Ve
Without the \f(CWbt_set_format_text()\fR call, \f(CWformat\fR would result in
names formatted like \f(CW"J. R. Smith"\fR.  After setting the post-token
text for first names to \f(CW""\fR, this name would become \f(CW"J R Smith"\fR.   
.Ip "bt_set_format_options()" 4
.Sp
.Vb 5
\&   void bt_set_format_options (bt_name_format * format, 
\&                               bt_namepart part,
\&                               boolean abbrev,
\&                               bt_joinmethod join_tokens,
\&                               bt_joinmethod join_part)
.Ve
Allows further customization of a name format: you can set the
abbreviation flag and the two token-join methods.  Alas, there is no
mechanism for leaving a value unchanged; you must set everything with
\f(CWbt_set_format_options()\fR.
.Sp
For example, let's say that just dropping periods from abbreviated
tokens in the first name isn't enough; you \fIreally\fR want to save
space by jamming the abbreviated tokens together: \f(CW"JR Smith"\fR rather
than \f(CW"J R Smith"\fR  Assuming the two calls in the above example have
been done, the following will finish the job:
.Sp
.Vb 4
\&   bt_set_format_options (format, BTN_FIRST,
\&                          TRUE,         /* keep same value for abbrev flag */
\&                          BTJ_NOTHING,  /* jam tokens together */
\&                          BTJ_SPACE);   /* space after final token of part */
.Ve
Note that we unfortunately had to know (and supply) the current values
for the abbreviation flag and post-part join method, even though we were
only setting the intra-part join method.
.Ip "bt_format_name()" 4
.Sp
.Vb 1
\&   char * bt_format_name (bt_name * name, bt_name_format * format)
.Ve
Once a name format has been created and customized to your heart's
content, you can use it to format any number of names that have been
split with \f(CWbt_split_name\fR (see the \fIbt_split_names\fR manpage).  Simply pass the
name structure and name format structure, and a newly-allocated string
containing the formatted name will be returned to you.  It is your
responsibility to \f(CWfree()\fR this string.
.SH "SEE ALSO"
the \fIbtparse\fR manpage, the \fIbt_split_names\fR manpage
.SH "AUTHOR"
Greg Ward <gward@python.net>

.rn }` ''
.IX Title "bt_format_names 3"
.IX Name "bt_format_names - formatting BibTeX names for consistent output"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "\(bu "

.IX Item "\(bu "

.IX Item "\(bu "

.IX Item "\(bu"

.IX Item "\(bu "

.IX Item "\s-1BTJ_MAYTIE\s0"

.IX Item "\s-1BTJ_SPACE\s0"

.IX Item "\s-1BTJ_FORCETIE\s0"

.IX Item "\s-1BTJ_NOTHING\s0"

.IX Header "FUNCTIONS"

.IX Item "bt_create_name_format()"

.IX Item "\(bu "

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "bt_free_name_format()"

.IX Item "bt_set_format_text()"

.IX Item "bt_set_format_options()"

.IX Item "bt_format_name()"

.IX Header "SEE ALSO"

.IX Header "AUTHOR"

