#!/bin/sh
# Part of latex2rtf by Scott Prahl (Nov 2002)
#
# This version uses latex with dvips
#              and ghostscript
#              and various netpbm utilities
#
# This script file will convert a latex file into a PNG image.
# Because latex2rtf also needs to convert EPS files, these are 
# also converted.  By default latex2png assumes that the input
# file is a latex file, however, if the extension is .eps, then
# the file is treated an EPS file. 
#
# When the latex file contains the tag 'INLINE_DOT_ON_BASELINE' then
# a dot is assumed to have been placed at the beginning of a latex
# This dot is used to locate the baseline of the equation for 
# alignment in the RTF file.  This shell script will create a PGN
# (portable gray map) file that can be used to determine the 
# height of the equation baseline
#
#set -x  # uncomment for debugging
#

DVIPS="dvips -q -E -R"
GHOSTSCRIPT="gs -dQUIET -dNOPAUSE -dBATCH -dSAFER"
LATEX="latex --interaction batchmode"
PNMCROP="pnmcrop"
PNMCUT="pnmcut"
PNMTOPNG="pnmtopng"
PPMTOPGM="ppmtopgm"
PGMTOPBM="pgmtopbm"
TEXINPSEP=":"
GREP="grep"
VERSION="1.2"

help()
{
cat <<HELP
latex2png -- convert latex file to PNG image

USAGE: latex2png [-d density] [-h] [-k] [-c] [-g] [-m] [-H home dir] file[.tex|.eps]

OPTIONS: 
         -c color image
         -g gray image  
         -m monochrome  (default)

         -d density     (default 144 dpi)
         -h help        (default '.')
         -H /home/dir	directory to be included in search path
         -k         	keep intermediate files (for debugging)

EXAMPLE: 
		 latex2png -d 144 /tmp/file   #create /tmp/file.png at 144 dpi
		 latex2png file.eps           #create file.png
		 latex2png file.tex           #create file.png via latex
         latex2png -H . /tmp/file     #search the cwd for image files

HELP
exit 0
}

version()
{
echo "latex2png $VERSION"
exit 0
}

opt_d=144		# default to 144 dpi
opt_k=0			# default to killing intermediate files
home_dir="."	# default to current directory
ext="tex"		# default to latex input
out="ppm"		# default to color output
inline=0		# default to no special equation processing

while [ -n "$1" ]; do
case $1 in
    -g) out="pgm";   shift 1;; #gray
    -c) out="ppm";   shift 1;; #color
    -m) out="pbm";   shift 1;; #monochrome
    -h) help;        shift 1;;
    -k) opt_k=1;     shift 1;; 
    -d) opt_d=$2;    shift 2;; #shift by 2 due to argument
    -H) home_dir=$2; shift 2;;
    -v) version;     shift 1;;
    --) break;;
    -*) echo "error:no such option $1"; exit 1;;
    *)  break;;
esac
done

# is there an input file?
if [ -z "$1" ] ; then
 echo "error: no input file specified"
 exit 1
fi

# is it an eps file?
if [ `echo $1 | ${GREP} -c eps$` -eq 1 ] ; then
	ext="eps"
fi

#process 'latex2png file.tex' and 'latex2png file' equivalently
name=`basename $1 ".$ext"`
dir=`dirname $1`

#add $home_dir to latex/dvips search path
cd $home_dir
TEXINPUTS=`pwd`${TEXINPSEP}
export TEXINPUTS
cd $dir

# does the input file exist?
if [ ! -f "$name.$ext" ] ; then
	echo "error: input file $name.$ext does not exist"
	exit 1
fi

rm -f $name.png

if [ $ext = "tex" ] ; then

	inline=`${GREP} -c INLINE_DOT_ON_BASELINE $name.$ext`

	$LATEX $name > /dev/null
	
	if [ ! -e "$name.dvi" ] ; then
		echo "error: latex failed to translate $name.tex to $name.dvi"
		exit 1
	fi
	
	$DVIPS -o $name.eps $name.dvi
	
	if [ ! -e "$name.eps" ] ; then
		echo "error: dvips failed to translate $name.dvi to $name.eps"
		exit 1
	fi
fi

$GHOSTSCRIPT -sDEVICE=$out -r${opt_d} -sOutputFile=$name.$out $name.eps 2> /dev/null

if [ ! -e "$name.$out" ] ; then
	echo "error: ghostscript failed to translate $name.eps to $name.$out"
	exit 1
fi

# $inline is for images of equations that include an extra dot on the baseline
#    this dot must be cropped out, and its height must be determined.
#    The height is determined from $name.pbm --- the first column of the image
#    The dot is then cropped out of $name.tmp.png and finally extra white space
#    in $name.tmp.png is removed to create the final image $name.png
# 
if [ $inline -eq 1 ] ; then
	rm -f $name.pbm $name.tmp.$out
	
	$PNMCROP $name.$out > $name.tmp.$out

	$PNMCUT -width 1 $name.tmp.$out | $PPMTOPGM | $PGMTOPBM > $name.pbm

	offset=`expr ${opt_d} / 72 + 2`
	$PNMCUT -left $offset $name.tmp.$out | $PNMCROP | $PNMTOPNG > $name.png
	
	if [ $opt_k -eq 0 ] ; then
		rm -f $name.tmp.$out
	fi
else
	$PNMCROP $name.$out | $PNMTOPNG > $name.png
fi

if [ ! -e "$name.png" ] ; then
    echo "error: pnmcrop or pnmtopng failed to crop and translate $name.$out to $name.png"
    exit 1
fi

if [ $opt_k -eq 0 ] ; then

    rm -f $name.dvi $name.aux $name.log

	if [ $ext != "eps" ] ; then
		rm -f $name.eps
	fi

	if [ $inline -eq 0 -o $out != "pbm" ] ; then
    		rm -f $name.$out
    fi
fi

exit 0

