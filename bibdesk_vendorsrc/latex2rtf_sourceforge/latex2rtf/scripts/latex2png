#!/bin/sh 
# Part of latex2rtf by Scott Prahl (Nov 2002)
#
# This version uses latex and dvips
#              with ps2ps (part of Ghostscript)
#              with convert (Part of ImageMagick)
#
# This script file will convert a latex file into a PNG image.
# Because latex2rtf also needs to convert EPS files, these are 
# also converted.  By default latex2png assumes that the input
# file is a latex file, however, if the extension is .eps, then
# the file is treated an EPS file. 
#
# When the latex file contains the tag 'INLINE_DOT_ON_BASELINE' then
# a dot is assumed to have been placed at the beginning of a latex
# This dot is used to locate the baseline of the equation for 
# alignment in the RTF file.  This shell script will create a PGN
# (portable gray map) file that can be used to determine the 
# height of the equation baseline
#
#set -x  # uncomment for debugging
#

DVIPS="dvips -q -E -R"
LATEX="latex --interaction batchmode"
CONVERT="convert"
EPS2EPS="eps2eps"
GREP="grep"
TEXINPSEP=":"
VERSION="1.4"

help()
{
cat <<HELP
latex2png -- convert latex file to PNG image

USAGE: latex2png [-d density] [-h] [-k] [-c] [-g] [-m] [-H home dir] file[.tex|.eps]

OPTIONS: 
         -c color image
         -g gray image  
         -m monochrome  (default)

         -d density     (default 144 dpi)
         -h             help
         -H /home/dir   directory to be included in search path (default '.')
         -k             keep intermediate files (for debugging)

EXAMPLES: 
         latex2png -d 144 /tmp/file   #create /tmp/file.png at 144 dpi
         latex2png file.eps           #create file.png
         latex2png file.tex           #create file.png via latex
         latex2png -H . /tmp/file     #search the cwd for image files

HELP
exit 0
}

version()
{
echo "latex2png $VERSION"
exit 0
}

opt_d=144       # default to 144 dpi
opt_k=0         # default to killing intermediate files
home_dir="."    # default to current directory
ext="tex"       # default to latex input
out="-depth 24" # default to color output
inline=0        # default to no special equation processing

while [ -n "$1" ]; do
case $1 in
    -g) out="-depth 8";    shift 1;; #gray
    -c) out="-depth 24";   shift 1;; #color
    -m) out="-monochrome"; shift 1;; #monochrome
    -h) help;              shift 1;;
    -k) opt_k=1;           shift 1;; 
    -d) opt_d=$2;          shift 2;; #shift by 2 due to argument
    -H) home_dir=$2;       shift 2;;
    -v) version;           shift 1;;
    --) break;;
    -*) echo "error: no such option $1"; exit 1;;
    *)  break;;
esac
done

# is there an input file?
if [ -z "$1" ] ; then
    error "no input file specified"
    exit 1
fi

# is it an eps file?
if [ `echo $1 | ${GREP} -c eps$` -eq 1 ] ; then
    ext="eps"
fi

#process 'latex2png file.tex' and 'latex2png file' equivalently
name=`basename $1 ".$ext"`
dir=`dirname $1`

#add $home_dir to latex/dvips search path
cd $home_dir
TEXINPUTS=`pwd`${TEXINPSEP}
export TEXINPUTS
cd $dir
    
# does the input file exist?
if [ ! -f "$name.$ext" ] ; then
 echo "error: input file $name.$ext does not exist in directory $dir"
 exit 1
fi

if [ $ext = "tex" ] ; then

    inline=`${GREP} -c INLINE_DOT_ON_BASELINE $name.$ext`

    $LATEX $name > /dev/null
    
    if [ ! -e "$name.dvi" ] ; then
        echo "error: latex failed to translate $name.tex to $name.dvi"
        exit 1
    fi
    
    $DVIPS -o $name.tmp.eps $name.dvi
    
    if [ ! -e "$name.tmp.eps" ] ; then
        echo "error: dvips failed to translate $name.dvi to $name.tmp.eps"
        exit 1
    fi
    
    #helps convert work with eps figures
    $EPS2EPS $name.tmp.eps $name.eps
    if [ ! -e "$name.eps" ] ; then
        echo "error: eps2eps (Ghostscript) failed to translate $name.tmp.eps from $name.eps"
        exit 1
    fi
fi

$CONVERT -crop 0x0 $out -density ${opt_d}x${opt_d} $name.eps $name.png

if [ ! -e "$name.png" ] ; then
    echo "error: convert (ImageMagick) failed to translate $name.eps from $name.png"
    exit 1
fi

# -i is for images of equations that include an extra dot on the baseline
#    this dot must be cropped out, and its height must be determined.
#    The height is determined from $name.gray --- the first column of the image
#    The dot is then cropped out in $name.tmp.png and finally extra white space
#    in $name.tmp.png is removed to create the final image $name.png
# 
if [ $inline -eq 1 ] ; then
    rm -f $name.ppm $name.pbm

    pngtopnm $name.png > $name.ppm
    
    pnmcut -width 1 $name.ppm | ppmtopgm | pgmtopbm > $name.pbm

    offset=`expr ${opt_d} / 72 + 2`
    pnmcut -left $offset $name.ppm | pnmcrop -left | pnmtopng > $name.png 2> /dev/null

    if [ $opt_k -eq 0 ] ; then
        rm -f $name.ppm
    fi
fi

if [ $opt_k -eq 0 ] ; then
    rm -f $name.dvi $name.aux $name.log $name.tmp.eps
    if [ $ext = "tex" ] ; then
        rm -f $name.eps
    fi
fi

exit 0
