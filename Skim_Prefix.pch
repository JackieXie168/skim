//
// Prefix header for all source files of the 'Skim' target in the 'Skim' project
//

#ifdef __OBJC__

    #import <Cocoa/Cocoa.h>
    #import <Quartz/Quartz.h>
    #import "SKCompatibility.h"
    #import <tgmath.h>

    #define __SKFILENAMEASNSSTRING \
      [[(id)CFStringCreateWithFileSystemRepresentation(NULL, __FILE__) autorelease] lastPathComponent]

    #if defined (DEBUG)

        #define log_method() \
          NSLog(@"%@[%@ %@] (%@ line %d)", (id)[self class] == (id)self ? @"+" : @"-", \
          [self class], NSStringFromSelector(_cmd), __SKFILENAMEASNSSTRING, __LINE__)

        #define log_function() \
          NSLog(@"%s (%@ line %d)", __PRETTY_FUNCTION__, __SKFILENAMEASNSSTRING, __LINE__)

    #else

       #define log_method()
       #define log_function()

    #endif

    #define SKINITIALIZE \
        do { \
            static BOOL hasBeenInitialized = NO; \
            [super initialize]; \
            if (hasBeenInitialized) \
                return; \
            hasBeenInitialized = YES;\
        } while (0)

    #define SKENSURE_MAIN_THREAD(code) \
        do { \
            if ([NSThread isMainThread]) { \
                code \
            } else { \
                dispatch_sync(dispatch_get_main_queue(), ^{ code }); \
            } \
        } while (0)

    #define SKDESTROY(variable) do { [variable release]; variable = nil; } while (0)
    #define SKCFDESTROY(variable) do { if (variable) CFRelease(variable); variable = NULL; } while (0)
    #define SKZONEDESTROY(variable) do { if (variable) NSZoneFree(NSZoneFromPointer((void*)variable), (void *)variable); variable = NULL; } while (0)
    #define SKDISPATCHDESTROY(variable) do { if (variable) dispatch_release(variable); variable = nil; } while (0)

    #define RUNNING(version) ((NSInteger)floor(NSAppKitVersionNumber) == (NSInteger)NSAppKitVersionNumber ## version)
    #define RUNNING_BEFORE(version) (floor(NSAppKitVersionNumber) < NSAppKitVersionNumber ## version)
    #define RUNNING_AFTER(version) (floor(NSAppKitVersionNumber) > NSAppKitVersionNumber ## version)

    #define DISPATCH_MAIN_AFTER_SEC(time, block) dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(time * NSEC_PER_SEC)), dispatch_get_main_queue(), block)


#else

/* this should work for C or C++ */

    #if defined (DEBUG)

       #define log_function() \
         do { \
            fprintf(stderr, "%s (%s line %d)", __PRETTY_FUNCTION__, __FILENAME__, __LINE__) \
            fflush(stderr); \
         } while (0)
    
    #else
    
       #define log_function()

    #endif

#endif
